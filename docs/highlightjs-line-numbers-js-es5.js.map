{"version":3,"sources":["webpack:///node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"names":["w","d","TABLE_NAME","LINE_NAME","CODE_BLOCK_NAME","NUMBERS_BLOCK_NAME","NUMBER_LINE_NAME","DATA_ATTR_NAME","BREAK_LINE_REGEXP","hljs","initLineNumbersOnLoad","lineNumbersBlock","lineNumbersValue","addStyles","console","error","isHljsLnCodeDescendant","domElt","curElt","className","indexOf","parentNode","getHljsLnTable","hljsLnDomElt","nodeName","edgeGetSelectedCodeLines","selection","selectionText","toString","tdAnchor","anchorNode","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","textContent","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","i","codeLineSel","format","codeLineElt","querySelector","document","addEventListener","e","window","getSelection","navigator","userAgent","clipboardData","setData","preventDefault","css","createElement","type","innerHTML","getElementsByTagName","appendChild","options","readyState","documentReady","blocks","querySelectorAll","hasOwnProperty","isPluginDisabledForBlock","element","classList","contains","async","lineNumbersInternal","value","internalOptions","mapOptions","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","singleLine","html","l","startFrom","getSingleLineOption","getStartFromOption","defaultValue","isFinite","getAttribute","toNumber","nodes","childNodes","node","child","getLinesCount","duplicateMultilineNode","test","result","lineText","text","split","match","func","setTimeout","args","replace","m","n","undefined","attrName","hasAttribute","str","fallback","number","Number"],"mappings":"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","file":"highlightjs-line-numbers-js-es5.js","sourcesContent":["// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf('Edge') !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    if (!isPluginDisabledForBlock(blocks[i])) {\n                        lineNumbersBlock(blocks[i], options);\n                    }\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function isPluginDisabledForBlock(element) {\n        return element.classList.contains('nohljsln');\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n\n        var internalOptions = mapOptions(element, options);\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, internalOptions);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, options) {\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > 1 || options.singleLine) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + options.startFrom,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {Object} options External API options.\n     * @returns {Object} Internal API options.\n     */\n    function mapOptions (element, options) {\n        options = options || {};\n        return {\n            singleLine: getSingleLineOption(options),\n            startFrom: getStartFromOption(element, options)\n        };\n    }\n\n    function getSingleLineOption (options) {\n        var defaultValue = false;\n        if (!!options.singleLine) {\n            return options.singleLine;\n        }\n        return defaultValue;\n    }\n\n    function getStartFromOption (element, options) {\n        var defaultValue = 1;\n        var startFrom = defaultValue;\n\n        if (isFinite(options.startFrom)) {\n            startFrom = options.startFrom;\n        }\n\n        // can be overridden because local option is priority\n        var value = getAttribute(element, 'data-ln-start-from');\n        if (value !== null) {\n            startFrom = toNumber(value, defaultValue);\n        }\n\n        return startFrom;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    ///\n    /// HELPERS\n    ///\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] !== undefined ? args[n] : m;\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {String} attrName Attribute name.\n     * @returns {String} Attribute value or empty.\n     */\n    function getAttribute (element, attrName) {\n        return element.hasAttribute(attrName) ? element.getAttribute(attrName) : null;\n    }\n\n    /**\n     * @param {String} str Source string.\n     * @param {Number} fallback Fallback value.\n     * @returns Parsed number or fallback value.\n     */\n    function toNumber (str, fallback) {\n        if (!str) return fallback;\n        var number = Number(str);\n        return isFinite(number) ? number : fallback;\n    }\n\n}(window, document));\n"]}